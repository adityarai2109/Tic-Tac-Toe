{"version":3,"sources":["components/Game.js","MovesImages/CircleDark.svg","MovesImages/CrossDark.svg","MovesImages/CircleLight.svg","MovesImages/CrossLight.svg","App.js","reportWebVitals.js","index.js"],"names":["Game","props","useState","arr","setArr","matrix","setMatrix","Change","index","setPlayer","player","newArr","src","CrossDark","alt","CircleDark","setCount","count","i","parseInt","j","newMatrix","ans","checkWinner","setDone","done","setWinner","names","console","table","className","map","disabled","onClick","Cell","setProceed","setNames","App","Math","random","proceed","winner","NamesHandler","e","newNames","type","placeholder","onChange","target","value","CrossLight","width","CircleLight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5907eec.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Game.css\";\r\n\r\nexport default function Game(props) {\r\n  const [arr, setArr] = useState([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\r\n  let array = [0, 1, 2, 3, 4, 5, 6, 7, 8];\r\n\r\n  const [matrix, setMatrix] = useState([\r\n    [-1, -1, -1],\r\n    [-1, -1, -1],\r\n    [-1, -1, -1],\r\n  ]);\r\n\r\n  function checkWinner() {\r\n    for (let i = 0; i < 3; i++) {\r\n      if (matrix[i][0] === matrix[i][1] && matrix[i][1] === matrix[i][2]) {\r\n        if (matrix[i][2] === 1) return 1;\r\n        else if (matrix[i][2] === 0) return 0;\r\n      }\r\n      if (matrix[0][i] === matrix[1][i] && matrix[1][i] === matrix[2][i]) {\r\n        if (matrix[2][i] === 1) return 1;\r\n        else if (matrix[2][i] === 0) return 0;\r\n      }\r\n    }\r\n    if (matrix[0][0] === matrix[1][1] && matrix[1][1] === matrix[2][2]) {\r\n      if (matrix[2][2] === 1) return 1;\r\n      else if (matrix[2][2] === 0) return 0;\r\n    }\r\n    if (matrix[0][2] === matrix[1][1] && matrix[1][1] === matrix[2][0]) {\r\n      if (matrix[2][0] === 1) return 1;\r\n      else if (matrix[2][0] === 0) return 0;\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  function Change(index) {\r\n    if (arr[index] === \"\") {\r\n      props.setPlayer(!props.player);\r\n      if (props.player) {\r\n        let newArr = [...arr];\r\n        newArr[index] = <img src={props.CrossDark} alt=\"X\" />;\r\n        setArr(newArr);\r\n      } else {\r\n        let newArr = [...arr];\r\n        newArr[index] = <img src={props.CircleDark} alt=\"O\" />;\r\n        setArr(newArr);\r\n      }\r\n      props.setCount(props.count + 1);\r\n\r\n      // matrix filling\r\n      let i = parseInt(index / 3);\r\n      let j = parseInt(index % 3);\r\n      if (props.player) {\r\n        let newMatrix = matrix;\r\n        newMatrix[i][j] = 1;\r\n        setMatrix(newMatrix);\r\n      } else {\r\n        let newMatrix = matrix;\r\n        newMatrix[i][j] = 0;\r\n        setMatrix(newMatrix);\r\n      }\r\n\r\n      let ans = checkWinner();\r\n      if (ans !== -1) {\r\n        props.setDone(!props.done);\r\n      }\r\n      if (ans === 1) {\r\n        props.setWinner(props.names[0]);\r\n      } else if (ans === 0) {\r\n        props.setWinner(props.names[1]);\r\n      }\r\n    }\r\n    console.table(matrix);\r\n  }\r\n\r\n  const Cell = (i) => {\r\n    return (\r\n      <div className=\"button\">\r\n        <button\r\n          className=\"buttons\"\r\n          disabled={props.done}\r\n          onClick={() => Change(i)}\r\n        >\r\n          {arr[i]}\r\n        </button>\r\n      </div>\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      {\r\n        /*!props.done &&*/ <div className=\"game\">\r\n          {array.map((i) => Cell(i))}\r\n        </div>\r\n      }\r\n      {(props.done || props.count === 9) && (\r\n        <button\r\n          className=\"refresh\"\r\n          onClick={() => {\r\n            setArr([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\r\n            props.setProceed(true);\r\n            props.setNames([\"Player 1 \", \"Player 2 \"]);\r\n            props.setDone(false);\r\n            props.setCount(0);\r\n          }}\r\n        >\r\n          Refresh\r\n        </button>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/CircleDark.02d1c743.svg\";","export default __webpack_public_path__ + \"static/media/CrossDark.7ca9f2af.svg\";","export default __webpack_public_path__ + \"static/media/CircleLight.a9f7376b.svg\";","export default __webpack_public_path__ + \"static/media/CrossLight.c91a637a.svg\";","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Game from \"./components/Game\";\r\nimport CircleDark from \"./MovesImages/CircleDark.svg\";\r\nimport CrossDark from \"./MovesImages/CrossDark.svg\";\r\nimport CircleLight from \"./MovesImages/CircleLight.svg\";\r\nimport CrossLight from \"./MovesImages/CrossLight.svg\";\r\n\r\nfunction App() {\r\n  const [player, setPlayer] = useState(Math.random() >= 0.5);\r\n  const [names, setNames] = useState([\"Player 1 \", \"Player 2 \"]);\r\n  const [proceed, setProceed] = useState(true);\r\n  const [done, setDone] = useState(false);\r\n  const [winner, setWinner] = useState(\"Draw\");\r\n  const [count, setCount] = useState(0);\r\n\r\n  const NamesHandler = (e, i) => {\r\n    let newNames = [...names];\r\n    newNames[i] = e;\r\n    setNames(newNames);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 className=\"heading\">Tic Tac Toe</h1>\r\n      {proceed && (\r\n        <form className=\"form\">\r\n          <div className=\"names\">\r\n            <div className=\"details\">\r\n              <fieldset>\r\n                <legend>\r\n                  <b>\r\n                    {\"\\xa0\"}Player 1{\"\\xa0\"}\r\n                  </b>\r\n                </legend>\r\n                <p>Enter your name</p>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"input\"\r\n                  placeholder=\"Hello Player 1\"\r\n                  onChange={(e) => NamesHandler(e.target.value, 0)}\r\n                />\r\n              </fieldset>\r\n            </div>\r\n            <div className=\"details\">\r\n              <fieldset>\r\n                <legend>\r\n                  <b>\r\n                    {\"\\xa0\"}Player 2{\"\\xa0\"}\r\n                  </b>\r\n                </legend>\r\n                <p>Enter your name</p>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"input\"\r\n                  placeholder=\"Hello Player 2\"\r\n                  onChange={(e) => NamesHandler(e.target.value, 1)}\r\n                />\r\n              </fieldset>\r\n            </div>\r\n          </div>\r\n          <h4>\r\n            Writing name is optional,\r\n            <br /> but you should write your name\r\n            <br /> for better experience\r\n          </h4>\r\n          <button className=\"submit\" onClick={() => setProceed(false)}>\r\n            Submit\r\n          </button>\r\n        </form>\r\n      )}\r\n\r\n      {!proceed && (\r\n        <div className=\"content\">\r\n          <Game\r\n            player={player}\r\n            setPlayer={setPlayer}\r\n            proceed={proceed}\r\n            setProceed={setProceed}\r\n            names={names}\r\n            setNames={setNames}\r\n            CircleDark={CircleDark}\r\n            CrossDark={CrossDark}\r\n            done={done}\r\n            setDone={setDone}\r\n            winner={winner}\r\n            setWinner={setWinner}\r\n            count={count}\r\n            setCount={setCount}\r\n          />\r\n          {!(done || count === 9) ? (\r\n            <h3>\r\n              {player ? (\r\n                <>\r\n                  {names[0]} ( <img src={CrossLight} alt=\"X\" width=\"25px\" /> )\r\n                </>\r\n              ) : (\r\n                <>\r\n                  {names[1]} ( <img src={CircleLight} alt=\"O\" width=\"25px\" /> )\r\n                </>\r\n              )}\r\n              it's your chance\r\n            </h3>\r\n          ) : winner === \"Draw\" ? (\r\n            <h3>{winner}</h3>\r\n          ) : (\r\n            <h3>{winner} won</h3>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}