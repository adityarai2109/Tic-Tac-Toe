{"version":3,"sources":["components/Game.js","MovesImages/CircleDark.svg","MovesImages/CrossDark.svg","MovesImages/CircleLight.svg","MovesImages/CrossLight.svg","App.js","reportWebVitals.js","index.js"],"names":["Game","props","useState","arr","setArr","matrix","setMatrix","Change","index","setPlayer","player","newArr","className","src","CrossDark","alt","CircleDark","setCount","count","console","log","i","parseInt","j","newMatrix","ans","checkWinner","setDone","done","setWinner","names","table","map","disabled","onClick","Cell","setProceed","setNames","App","Math","random","proceed","winner","NamesHandler","e","newNames","type","placeholder","onChange","target","value","CrossLight","width","CircleLight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9a487728.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Game.css\";\r\n\r\nexport default function Game(props) {\r\n  const [arr, setArr] = useState([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\r\n  let array = [0, 1, 2, 3, 4, 5, 6, 7, 8];\r\n\r\n  const [matrix, setMatrix] = useState([\r\n    [-1, -1, -1],\r\n    [-1, -1, -1],\r\n    [-1, -1, -1],\r\n  ]);\r\n\r\n  function checkWinner() {\r\n    for (let i = 0; i < 3; i++) {\r\n      if (matrix[i][0] === matrix[i][1] && matrix[i][1] === matrix[i][2]) {\r\n        if (matrix[i][2] === 1) return 1;\r\n        else if (matrix[i][2] === 0) return 0;\r\n      }\r\n      if (matrix[0][i] === matrix[1][i] && matrix[1][i] === matrix[2][i]) {\r\n        if (matrix[2][i] === 1) return 1;\r\n        else if (matrix[2][i] === 0) return 0;\r\n      }\r\n    }\r\n    if (matrix[0][0] === matrix[1][1] && matrix[1][1] === matrix[2][2]) {\r\n      if (matrix[2][2] === 1) return 1;\r\n      else if (matrix[2][2] === 0) return 0;\r\n    }\r\n    if (matrix[0][2] === matrix[1][1] && matrix[1][1] === matrix[2][0]) {\r\n      if (matrix[2][0] === 1) return 1;\r\n      else if (matrix[2][0] === 0) return 0;\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  function Change(index) {\r\n    if (arr[index] === \"\") {\r\n      props.setPlayer(!props.player);\r\n      if (props.player) {\r\n        let newArr = [...arr];\r\n        newArr[index] = <img className=\"cross\" src={props.CrossDark} alt=\"X\" />;\r\n        setArr(newArr);\r\n      } else {\r\n        let newArr = [...arr];\r\n        newArr[index] = (\r\n          <img className=\"circle\" src={props.CircleDark} alt=\"O\" />\r\n        );\r\n        setArr(newArr);\r\n      }\r\n      props.setCount(props.count + 1);\r\n      console.log(arr);\r\n      // matrix filling\r\n      let i = parseInt(index / 3);\r\n      let j = parseInt(index % 3);\r\n      if (props.player) {\r\n        let newMatrix = matrix;\r\n        newMatrix[i][j] = 1;\r\n        setMatrix(newMatrix);\r\n      } else {\r\n        let newMatrix = matrix;\r\n        newMatrix[i][j] = 0;\r\n        setMatrix(newMatrix);\r\n      }\r\n\r\n      let ans = checkWinner();\r\n      if (ans !== -1) {\r\n        props.setDone(!props.done);\r\n      }\r\n      if (ans === 1) {\r\n        props.setWinner(props.names[0]);\r\n      } else if (ans === 0) {\r\n        props.setWinner(props.names[1]);\r\n      }\r\n    }\r\n    console.table(matrix);\r\n  }\r\n\r\n  const Cell = (i) => {\r\n    return (\r\n      <div className=\"button\">\r\n        <button\r\n          className=\"buttons\"\r\n          disabled={props.done}\r\n          onClick={() => Change(i)}\r\n        >\r\n          {arr[i]}\r\n        </button>\r\n      </div>\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      {<div className=\"game\">{array.map((i) => Cell(i))}</div>}\r\n      {(props.done || props.count === 9) && (\r\n        <button\r\n          className=\"refresh\"\r\n          onClick={() => {\r\n            setArr([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\r\n            props.setProceed(true);\r\n            props.setNames([\"Player 1 \", \"Player 2 \"]);\r\n            props.setDone(false);\r\n            props.setCount(0);\r\n          }}\r\n        >\r\n          Refresh\r\n        </button>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/CircleDark.20db431a.svg\";","export default __webpack_public_path__ + \"static/media/CrossDark.4c548902.svg\";","export default __webpack_public_path__ + \"static/media/CircleLight.a9f7376b.svg\";","export default __webpack_public_path__ + \"static/media/CrossLight.c91a637a.svg\";","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Game from \"./components/Game\";\r\nimport CircleDark from \"./MovesImages/CircleDark.svg\";\r\nimport CrossDark from \"./MovesImages/CrossDark.svg\";\r\nimport CircleLight from \"./MovesImages/CircleLight.svg\";\r\nimport CrossLight from \"./MovesImages/CrossLight.svg\";\r\n\r\nfunction App() {\r\n  const [player, setPlayer] = useState(Math.random() >= 0.5);\r\n  const [names, setNames] = useState([\"Player 1 \", \"Player 2 \"]);\r\n  const [proceed, setProceed] = useState(true);\r\n  const [done, setDone] = useState(false);\r\n  const [winner, setWinner] = useState(\"Draw\");\r\n  const [count, setCount] = useState(0);\r\n\r\n  const NamesHandler = (e, i) => {\r\n    let newNames = [...names];\r\n    newNames[i] = e;\r\n    setNames(newNames);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 className=\"heading\">Tic Tac Toe</h1>\r\n      <div className=\"content\">\r\n        {proceed && (\r\n          <form className=\"form\">\r\n            <div className=\"names\">\r\n              <div className=\"details\">\r\n                <fieldset>\r\n                  <legend>\r\n                    <b>\r\n                      {\"\\xa0\"}Player 1{\"\\xa0\"}\r\n                    </b>\r\n                  </legend>\r\n                  <p>Enter your name</p>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"input\"\r\n                    placeholder=\"Hello Player 1\"\r\n                    onChange={(e) => NamesHandler(e.target.value, 0)}\r\n                  />\r\n                </fieldset>\r\n              </div>\r\n              <div className=\"details\">\r\n                <fieldset>\r\n                  <legend>\r\n                    <b>\r\n                      {\"\\xa0\"}Player 2{\"\\xa0\"}\r\n                    </b>\r\n                  </legend>\r\n                  <p>Enter your name</p>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"input\"\r\n                    placeholder=\"Hello Player 2\"\r\n                    onChange={(e) => NamesHandler(e.target.value, 1)}\r\n                  />\r\n                </fieldset>\r\n              </div>\r\n            </div>\r\n            <h4>\r\n              Writing name is optional,\r\n              <br /> but you should write your name\r\n              <br /> for better experience\r\n            </h4>\r\n            <button className=\"submit\" onClick={() => setProceed(false)}>\r\n              Submit\r\n            </button>\r\n          </form>\r\n        )}\r\n\r\n        {!proceed && (\r\n          <div className=\"content\">\r\n            <Game\r\n              player={player}\r\n              setPlayer={setPlayer}\r\n              proceed={proceed}\r\n              setProceed={setProceed}\r\n              names={names}\r\n              setNames={setNames}\r\n              CircleDark={CircleDark}\r\n              CrossDark={CrossDark}\r\n              done={done}\r\n              setDone={setDone}\r\n              winner={winner}\r\n              setWinner={setWinner}\r\n              count={count}\r\n              setCount={setCount}\r\n            />\r\n            {!(done || count === 9) ? (\r\n              <h3>\r\n                {player ? (\r\n                  <>\r\n                    {names[0]} ( <img src={CrossLight} alt=\"X\" width=\"18vw\" /> )\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    {names[1]} ( <img src={CircleLight} alt=\"O\" width=\"18vw\" />{\" \"}\r\n                    )\r\n                  </>\r\n                )}\r\n                it's your chance\r\n              </h3>\r\n            ) : winner === \"Draw\" ? (\r\n              <h3>{winner}</h3>\r\n            ) : (\r\n              <h3>{winner} won</h3>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}